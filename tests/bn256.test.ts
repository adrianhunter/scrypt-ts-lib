import { expect } from 'chai'
import { BN256, BN256Test, FQ2, FQ6, FQ12 } from '../src/ec/bn256'
import { method, assert, SmartContract } from 'scrypt-ts'

describe('Test BN256 curve', () => {
    let bn256test = undefined

    before(async () => {
        await BN256Test.compile()
        bn256test = new BN256Test()
    })

    it('should pass modReduce positive', () => {
        const result = bn256test.verify((self) => {
            self.modReduce(372193n, 3462n, 1759n)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass modReduce negative', () => {
        const result = bn256test.verify((self) => {
            self.modReduce(-3128731n, 324n, 137n)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass mulFQ2', () => {
        const a: FQ2 = {
            x: 3405987990548047266285113383219237375681208871336813088616720519859893290134n,
            y: 1097898363339025022619935773355466049707129377218109808632059205990511152495n,
        }

        const b: FQ2 = {
            x: 15830831802146768141237429417912648980608634485983879601502329719750329240910n,
            y: 17600223279572061457933096596049532983114752208629637134127581753862971379897n,
        }

        const res: FQ2 = {
            x: 13280456509302578120643211182778528028445008769070598400682486420300123382757n,
            y: 14077784831528911634874593541487249727922369879397996051239784098410438328913n,
        }

        const result = bn256test.verify((self) => {
            self.mulFQ2(a, b, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass mulFQ2 2', () => {
        const a: FQ2 = {
            x: 2105949740918914271063060105651059047460421027348448486594564918154771860041n,
            y: 7208877007268361263057405770448273475112041783806363014296774951734852085369n,
        }

        const b: FQ2 = {
            x: 10430039423184564997462271628464346688096335645121092027654136556673260830422n,
            y: 2799353695224389898488658176425253066859548401343314072983449794730044616840n,
        }

        const res: FQ2 = {
            x: 21158591738682076599638557511778046142659168645991996733335023337715484387262n,
            y: 10726908656447904775952145913657767139169072279906216760789214831406461465222n,
        }

        const result = bn256test.verify((self) => {
            self.mulFQ2(a, b, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass squareFQ2', () => {
        const a: FQ2 = {
            x: 10164919993845888976671999787039108309239529043666519144065145175600019709494n,
            y: 15683256606647490518785263877633372276865645512106721863554218588333290209773n,
        }

        const res: FQ2 = {
            x: 17716346817668547898162895567898312367694994438385561530353133167613592559022n,
            y: 749864555281199384965917972403867944977631700788046722647372737976621316898n,
        }

        const result = bn256test.verify((self) => {
            self.squareFQ2(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass squareFQ2 2', () => {
        const a: FQ2 = {
            x: 19144803157775278375159214991808770972199362191093019402310641453501381025905n,
            y: 16446063910291131587708796740164098404410454097985448112522177643751361268548n,
        }

        const res: FQ2 = {
            x: 13281746305287042580201749504728912103367391312590007531435309421806045723870n,
            y: 10607158569612045664768872322411272349032031201412280681690286780254028051669n,
        }

        const result = bn256test.verify((self) => {
            self.squareFQ2(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass invFQ2', () => {
        const a: FQ2 = {
            x: 12663726281075052576529495445555233084042548599504779355532284358480159563264n,
            y: 16917274543618607638879329582985454648863990160135520144890278124310018978736n,
        }

        const res: FQ2 = {
            x: 19933770970579907078333995283070161635300178294043109376243005639132530396374n,
            y: 20223262398611830173189782858380965369898070481705127844627698905560703728637n,
        }

        const result = bn256test.verify((self) => {
            self.invFQ2(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass invFQ2 2', () => {
        const a: FQ2 = {
            x: 2052813411379716806235723156424559943938583125432754199617746434996707713042n,
            y: 15620931015604026000042387094780759873793284514400320915957021197407947202637n,
        }

        const res: FQ2 = {
            x: 12635521097006000412927971235813000722393121407338074671576732785491229027785n,
            y: 4637679684128228996969231133835363570799044502926418616344576372644025384724n,
        }

        const result = bn256test.verify((self) => {
            self.invFQ2(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass mulFQ6', () => {
        const a: FQ6 = {
            x: {
                x: 269735992327516357930611071344470881862393483234643917350114455658125027090n,
                y: 18519768079963060917322695836800383137177574100004329226902048453605681415376n,
            },
            y: {
                x: 20572770531316432130264879657652984981773114066855117946113698041474171522312n,
                y: 4822378163247929101493373539402478918672157203419379620169985712584788798169n,
            },
            z: {
                x: 18385300704736598240046257897749776569377122891664211661396639651897860328452n,
                y: 19795314912613334313312435599960491323988620410987791577733248927677055777534n,
            },
        }
        const b: FQ6 = {
            x: {
                x: 17389563342139874846052469032571037237864423331438041189360796952646910919805n,
                y: 4630774776573777805654155676872998061855636909944470136731019911788616420243n,
            },
            y: {
                x: 10618140968118410034891344260373999299770385801610869615297944463011790619953n,
                y: 16583818020278621947456403338132272023567849751287732606259104600040034376029n,
            },
            z: {
                x: 14235960413237980040226413807432774122650891011721489725851818017929222485715n,
                y: 1644668556122049546940103186617383177478196789905334582290590324610371494254n,
            },
        }
        const res: FQ6 = {
            x: {
                x: 18673838017066506336534914687472717593572203362763387040811960079920295941018n,
                y: 5266367559534718678140597267532555574178653987052415719918061633689201297489n,
            },
            y: {
                x: 2439082191615983084210352702930746525416595317785563270789714587667729156218n,
                y: 3736360156023874682591505125083676464425581394249903938452716726099246954255n,
            },
            z: {
                x: 21106590581958478870499671262571604342965453989742703830368944922121442249954n,
                y: 1167783656873613297554352735456962820171297649105447303780160492049925664689n,
            },
        }

        const result = bn256test.verify((self) => {
            self.mulFQ6(a, b, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass mulFQ6 2', () => {
        const a: FQ6 = {
            x: {
                x: 4162755537994412704516801275899338804106308320384447919254786163652631170095n,
                y: 4708804279588978059366377342643545837514712791019258219107417094143645479133n,
            },
            y: {
                x: 12901977900345968633451855839345063723138521315947002780035111109276496773022n,
                y: 9146907689084122853108696613632282266641955871368213936194584511919892407228n,
            },
            z: {
                x: 18807037298317474092178344871308438150821702726534094611966977105142793262525n,
                y: 6762318397907170669874199783775350424894526097010312280068158526098510137298n,
            },
        }
        const b: FQ6 = {
            x: {
                x: 17577093473024199615810047414528411475742907248062466053149792388214708278233n,
                y: 672379167982394239247266590040263426154008113435568902911445875300854617475n,
            },
            y: {
                x: 6611021597546347632375751965664895466815711061667286011832679622562189514008n,
                y: 6015528016444923505209634023206614593429461222046143389440990584271433150066n,
            },
            z: {
                x: 4416524162789516537137553640635761668755479365710044553430038776554507513325n,
                y: 350223526925152246375296855580783553281276828593945735350965977407545262546n,
            },
        }
        const res: FQ6 = {
            x: {
                x: 15829438438907203416166743369476618636646319730311703004174480552016261343851n,
                y: 6070847778525766869787165064823226517965388989425695939451568659985495479116n,
            },
            y: {
                x: 1128430993235391809529748657532277149438484923695379983590455059593544670228n,
                y: 5095916937473131068032097563453740989408812860269737423761691261768344253198n,
            },
            z: {
                x: 15787737944265350106734282603277394632445617378037665493653780193759189073247n,
                y: 10939143206082084465806298804846364467474680266119666876060021511266434991481n,
            },
        }

        const result = bn256test.verify((self) => {
            self.mulFQ6(a, b, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass squareFQ6', () => {
        const a: FQ6 = {
            x: {
                x: 4376910846963184077282690217536896033179272864181174761669538584076501005955n,
                y: 19801795622760228036081858860520012544262308357198218368118592156333477273208n,
            },
            y: {
                x: 2708894691794165897443803342906835035922995079177728406978081667127781774896n,
                y: 13957164419927418036909819903511270014096753416376013886015409756906680780677n,
            },
            z: {
                x: 19524684583522101505367990112110717795508122200685204049114272513711759267381n,
                y: 10605965299681107618517234941853154316172287713149537511816604407438960875265n,
            },
        }
        const res: FQ6 = {
            x: {
                x: 11265177159986534734797980244832179474452373425602864679434432719381519470030n,
                y: 17340880029604624932020562655960062621278522898038311535658964590303361964660n,
            },
            y: {
                x: 13006741302555327190267744158478755624353184877265981887179983581577845252463n,
                y: 16794254397786609334226555904688167861773781109245829088239120055287232487637n,
            },
            z: {
                x: 15555540772038741829467703705700523602121286458013248123239887430370572138484n,
                y: 286229156832112763960321930157013806192944459428729034995613521603541635891n,
            },
        }

        const result = bn256test.verify((self) => {
            self.squareFQ6(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass squareFQ6 2', () => {
        const a: FQ6 = {
            x: {
                x: 14962835205872366177243303715412174615928319640527684327288092600377314698479n,
                y: 13053160179047214441161102196718012592306598377255704985320022984450443240424n,
            },
            y: {
                x: 17976666639103769148053313359216449326222834797036810291649522676766185305117n,
                y: 17556461863519454321890891689079206365542626354205850623929304839648067677446n,
            },
            z: {
                x: 8557273973438766755574800374960734314125209020129711143871288505285593948046n,
                y: 11870881657204666760384178774555968656703647448881802143343279703807135369369n,
            },
        }
        const res: FQ6 = {
            x: {
                x: 10225052161509211148633632716922107534989657864679888709962227175636953050803n,
                y: 14908550745606886520264451348004998062211149866410203887904115299553892154966n,
            },
            y: {
                x: 15904959385619347434784600864960219972003528848051312254417680511506133298004n,
                y: 6624771338714925220120239937333383074159815310401738514965015146852316708144n,
            },
            z: {
                x: 13895669877560370164881761189148649532691262756670125190630150681187780236516n,
                y: 9553317324636307430676576337308572441211500643851498559754826422192419302766n,
            },
        }

        const result = bn256test.verify((self) => {
            self.squareFQ6(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass invFQ12', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 14962835205872366177243303715412174615928319640527684327288092600377314698479n,
                    y: 13053160179047214441161102196718012592306598377255704985320022984450443240424n,
                },
                y: {
                    x: 17976666639103769148053313359216449326222834797036810291649522676766185305117n,
                    y: 17556461863519454321890891689079206365542626354205850623929304839648067677446n,
                },
                z: {
                    x: 8557273973438766755574800374960734314125209020129711143871288505285593948046n,
                    y: 11870881657204666760384178774555968656703647448881802143343279703807135369369n,
                },
            },
            y: {
                x: {
                    x: 4376910846963184077282690217536896033179272864181174761669538584076501005955n,
                    y: 19801795622760228036081858860520012544262308357198218368118592156333477273208n,
                },
                y: {
                    x: 2708894691794165897443803342906835035922995079177728406978081667127781774896n,
                    y: 13957164419927418036909819903511270014096753416376013886015409756906680780677n,
                },
                z: {
                    x: 19524684583522101505367990112110717795508122200685204049114272513711759267381n,
                    y: 10605965299681107618517234941853154316172287713149537511816604407438960875265n,
                },
            },
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 14835700260826460843070827612066610007434647548973281978436875143393667824088n,
                    y: 6271612597904825434431247699357255682120677172717335534206505284100033702639n,
                },
                y: {
                    x: 16392386127679904830837218261175824797058978927818845844136323528285965041881n,
                    y: 3805428154618599013205712686479565335730193082423809600153428839077122944670n,
                },
                z: {
                    x: 6008892557202289649753104383262057172669772864144993640860120298616570908963n,
                    y: 14984996349317306290065613246909262903134590829512426994426505447512534720322n,
                },
            },
            y: {
                x: {
                    x: 10804893922309916649368717126321470001348438447340600004578312909330527532419n,
                    y: 20059432132158151930951147445761530507648744789306345154819952298691919649826n,
                },
                y: {
                    x: 18326411303947156696325674126982063239797571161718421733529343973532378991848n,
                    y: 11695680612980382164731276008218810200191594664512000482665030260791823465116n,
                },
                z: {
                    x: 8437538072924505333204250583926158702062519156247504242266871576031026225321n,
                    y: 3581544259791327815669289548269054304486046632791537486021514204975595064876n,
                },
            },
        }

        const result = bn256test.verify((self) => {
            self.invFQ12(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass invFQ12 2', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 18182632690585155480066401789677462915160080147078024541044505679134043801624n,
                    y: 18756659099869622416398026806334702908761549521661523169154954588904935993200n,
                },
                y: {
                    x: 16766093016143474192834333978765763419103220662254909066032151124021693815190n,
                    y: 8105169816662831058084088019706265035657695795417614628229734343211224601790n,
                },
                z: {
                    x: 8310100584158896831659102087069152512813947414512145353048932322640421530342n,
                    y: 2050534350109382346341669701211139679584837446685590713219384910314685493172n,
                },
            },
            y: {
                x: {
                    x: 8310341924860510023830258150186141914004777632353034000823283858301346543868n,
                    y: 13152064136971625639128477894376624458043647154316127852803452852286770034868n,
                },
                y: {
                    x: 1312716740278214957408647206939758110015877233546049975668403556947036053359n,
                    y: 18064893566954139953319955189069125269976218724948414344414274509769712809728n,
                },
                z: {
                    x: 11210053661172812705075784126491575809386016671411390535619004002395204959299n,
                    y: 11562726619764816062302278138242389206470987980913704667485307688362945763301n,
                },
            },
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 8858826214687033107893450037904032731689546567049342758142171646748956569265n,
                    y: 10981648515882557024797918498385105463970913542048008322874908627466052193944n,
                },
                y: {
                    x: 182633900903259258258314763401771218219396705438205428030196674085198269981n,
                    y: 10989512821370132660448448330646925883773479386489686397945516857699547966738n,
                },
                z: {
                    x: 9731260958025134508573240940307646083964397009715700064972760772609858655732n,
                    y: 6229608166207495906462299869156843926342310461873289118912103180527335727726n,
                },
            },
            y: {
                x: {
                    x: 11943153475091427238338486080062645147321020270903373265837722031878716303969n,
                    y: 4978911881847163645789386791648528197331928740551300074563958573059728201124n,
                },
                y: {
                    x: 10117343178103988138187969426412962459076098857241294073198733837576231949731n,
                    y: 15247885160794947811983842550560314002417736144715920218250668989093472114147n,
                },
                z: {
                    x: 4836900947792471958759221518416684264167239094747072194634570437514576918259n,
                    y: 8730964459145185559615363065786983262144136286367939437040232539398964207826n,
                },
            },
        }

        const result = bn256test.verify((self) => {
            self.invFQ12(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass mulFQ12', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 7784481333904613234615020874508650662985127703950999148047279391912442764413n,
                    y: 2118436321218706064281999990311658522899355536423975621681456492868904561036n,
                },
                y: {
                    x: 17176654410959394123565292283204618444379870763346701051632622070330810367454n,
                    y: 21426797319871530766413239844234937987815179103765471240720978887440409415058n,
                },
                z: {
                    x: 4273568881824971585722363518586823601745785437499187408781728493557528785859n,
                    y: 4596251892340774341312037484832132333367626949038570664206684885351329345116n,
                },
            },
            y: {
                x: {
                    x: 20798446430000147994419356292370206277097891986232331224634106308006691209426n,
                    y: 19700665353769319732707335492871691396986654715660373806857987423950277453443n,
                },
                y: {
                    x: 14571725059841757017556576285681962749962026811368014230915240059965992326763n,
                    y: 8280825948775532807105680093460974480713921333848800366940083006035805185843n,
                },
                z: {
                    x: 20641567283233034255346462234519004256278828482761478341599795213412160090227n,
                    y: 9081326492232270239059880791269112386182184033943178347144388644445745943693n,
                },
            },
        }

        const b: FQ12 = {
            x: {
                x: {
                    x: 21857330661404533739003334066885277559380676895778216793510200947228972549957n,
                    y: 14629093818181714660205177640921164897437265992463988743845669217265364143763n,
                },
                y: {
                    x: 19733687027589893815058563939158959010044343879487360688372499965540783753902n,
                    y: 2501639049622510119513795084699500383952916193145146035583097395902403785843n,
                },
                z: {
                    x: 564253797199636440860115813369208151341234337559386465634850278453681678098n,
                    y: 15201771846910615899151153463688073544565461559156452764155399242047181834715n,
                },
            },
            y: {
                x: {
                    x: 1324897414740949018855194355889342488219345309026792587421372949261589736640n,
                    y: 16264050578748545143658501171889073629105065076000490984856836960753657284756n,
                },
                y: {
                    x: 1230490089712165047473419292587901404428141467956307368628593523838645845575n,
                    y: 15599360159369588294692380086586247270180291203902942671159126137671004589274n,
                },
                z: {
                    x: 3266183624029489224812112580627284013457981787597953798265673493747326252932n,
                    y: 20675640676065287571308475391489910133626428982111049729220912626567669743452n,
                },
            },
        }

        const res: FQ12 = {
            x: {
                x: {
                    x: 10968273847466613506394340410434131423592333354505262662668763345269120021441n,
                    y: 8183954255151815167902121352125340625032645800268361446290498515159491816032n,
                },
                y: {
                    x: 19018518705951761226237491927908836520122845293048452746282448192659608530411n,
                    y: 7557182513880691782795237366483800877229580679001842470615441055720915310457n,
                },
                z: {
                    x: 9846939180401649588809797189795596013454375530807233023803009530948402506821n,
                    y: 21717550509874671044358327977940792532245180594662999305600100245882376799505n,
                },
            },
            y: {
                x: {
                    x: 6725438873638635771361152970768819045633723256303979107818531661418352321787n,
                    y: 2576543062128709408971783001696789322654021019058448774831712696992976899633n,
                },
                y: {
                    x: 9211230978829338204228396794729567629118714805374490279233727565227477746283n,
                    y: 9471531087803531668976237009916641624138309528287836350293294213589653260803n,
                },
                z: {
                    x: 18492326453336371017308494328529321390617547040383998237553188173755358907810n,
                    y: 18175100496692864711608817811700228274059307713031135211648493932692083079008n,
                },
            },
        }

        const result = bn256test.verify((self) => {
            self.mulFQ12(a, b, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass frobeniusFQ12', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 14151119402302086502908963719376192366803091635014911443578100159469021653832n,
                    y: 6208398084320180307167330309409917655515292217317968003659537972866849024169n,
                },
                y: {
                    x: 5944966622841493686390400998708612841573116268338292211899714086074831038506n,
                    y: 19001403943154980426554825852420282105467708204441727159788558908132162473474n,
                },
                z: {
                    x: 11527006206510824341675880048924349638538701031159453006301460499135488675392n,
                    y: 7981013508608733936693541088148558554692521025294076677005767491074762940993n,
                },
            },
            y: {
                x: {
                    x: 18063426034516201616520225507303853711654283914125851959126125589903677526003n,
                    y: 15715916777889017187118805997468098415761218839100399714784743241009161123024n,
                },
                y: {
                    x: 3164311863503605524693427124522731219180306059078428239121595668020675835524n,
                    y: 2882470684118492718005858690457341172767079040425353005601287148393562713577n,
                },
                z: {
                    x: 2043292900252603082420472288679829794180051321976297480947433658783127090402n,
                    y: 7084908200534757378151369962039076455260850623995891433583125291318978571920n,
                },
            },
        }

        const res: FQ12 = {
            x: {
                x: {
                    x: 19600170173987036041165750470573963980345272598856023223946484461613757609045n,
                    y: 13709110808416160895181166382312167885647945822530515746755376873853616235283n,
                },
                y: {
                    x: 19650958997578739348855665034183411340242699931638906524936777938732681731155n,
                    y: 821020773510333791402441426536249141436798637346325791421151939327034147540n,
                },
                z: {
                    x: 11660549400182593260808620153812203106311581414020920856222058825231481946315n,
                    y: 18003100000103808722993074230742254433647249260389012777105581941846823002844n,
                },
            },
            y: {
                x: {
                    x: 9863294261397447758891447884473165065444069197857844807486851531299946776422n,
                    y: 2840704013632350317485926967434780460535548235023917137027809062659330643998n,
                },
                y: {
                    x: 11171941826928792443817418431942220274256022748541843474343059036910214493764n,
                    y: 11659532909292733435611627791891035404989873633408683829801954758306766546057n,
                },
                z: {
                    x: 19844949971586672139825933456577445294516259835321526181741604235862099118181n,
                    y: 7084908200534757378151369962039076455260850623995891433583125291318978571920n,
                },
            },
        }

        const result = bn256test.verify((self) => {
            self.frobeniusFQ12(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass frobeniusP2FQ12', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 12312967809974747247364484783653713611492708526726884166358943076003306140191n,
                    y: 3826577179255409238101873080706344573044986434219742583242872232539171411615n,
                },
                y: {
                    x: 11071360578730124313797287934205657285179641791019549174461057258085326326281n,
                    y: 9006275090570913399877967707006817523737008886990593664671316401200674331337n,
                },
                z: {
                    x: 7504197382191301790776346346626610863655810728429846936411180063999418026941n,
                    y: 17807880899210422706075317947240518939864346803251496187434806472362839604145n,
                },
            },
            y: {
                x: {
                    x: 19008400940103117948676699763787982857599534385979214595852156160700122214151n,
                    y: 8414797639657294228966182523518454337943790742420508169630111304012505931872n,
                },
                y: {
                    x: 19096698610920046659416400039158855020829200924201190983692542171623568442579n,
                    y: 17097490013174391756896370401977535006972040908946438570168313807820848405479n,
                },
                z: {
                    x: 4593491565648242617057972509979341318614400846407395233320943817488162073478n,
                    y: 1261420173692231444218451351979120422644999673522476089734220272162147830885n,
                },
            },
        }

        const res: FQ12 = {
            x: {
                x: {
                    x: 20492822902611716906655661694574284708074831385151540204527378505354389563765n,
                    y: 18617981048278938934940644319130811751910029709655065570486931947477998364113n,
                },
                y: {
                    x: 10816882293109150908449117811051617803516669366278274488227980636559899882302n,
                    y: 12881967781268361822368438038250457564959302270307229998017721493444551877246n,
                },
                z: {
                    x: 11676084183928341752655034459203969504194963694481028929724395742767537652129n,
                    y: 4663974098532815309982853841927528965557863951368636356875545544003651545532n,
                },
            },
            y: {
                x: {
                    x: 5989161376154771025664806340857508263958493844544599995819137315132116974953n,
                    y: 14375683851202364326117632396451696400672305740373277844698663435082821465138n,
                },
                y: {
                    x: 18191309243452644273638224492110379971000134909524951447864170762108735917896n,
                    y: 16594714525704396595822288255743831630606336207680149761261492361759492614115n,
                },
                z: {
                    x: 4593491565648242617057972509979341318614400846407395233320943817488162073478n,
                    y: 1261420173692231444218451351979120422644999673522476089734220272162147830885n,
                },
            },
        }

        const result = bn256test.verify((self) => {
            self.frobeniusP2FQ12(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass squareFQ12', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 18244162203144443042787612386084031337183726633772623263028666736861244581103n,
                    y: 7727382096456775635396295971364324543237966852236232086331160065427417229192n,
                },
                y: {
                    x: 1422836079830128026817856046212376506575705951709884987857246417154467964832n,
                    y: 97893118525917180609117972108995827540203155408611649242218325943025302879n,
                },
                z: {
                    x: 16630384113802323990962767839074136564276584672006301196501824960673227250459n,
                    y: 3193841049459477486047053638757369040896563184731982939002052168568665096691n,
                },
            },
            y: {
                x: {
                    x: 3395460245035965178029832052161525956155140442770108729662536795126731750303n,
                    y: 18599156220962435315062736948779261684153371357392116570902395435478098588139n,
                },
                y: {
                    x: 7692311519919483430703215282119159664148149497762143980767345492641200755861n,
                    y: 9549617224281880612017862595981826021032008386831193021335881026483292022210n,
                },
                z: {
                    x: 10170489692880436292768169600283876161637795597670370817763822475005934170331n,
                    y: 10876121461041088338068893925648640727310622524676048990799826788174615141571n,
                },
            },
        }

        const res: FQ12 = {
            x: {
                x: {
                    x: 17872331878195944926864474788548243743288561285365684645540843964605790847678n,
                    y: 1797134316110052457557909199703814500385043539350815251746609224663569416215n,
                },
                y: {
                    x: 4088021001316003144006415112890103819393973287220904375749996019583247536103n,
                    y: 6600787380623732986636706083355282358783742118465669906176567349158190647727n,
                },
                z: {
                    x: 11238602431446177487556536599821491352139808410049029734640357280334741847699n,
                    y: 10863021028164836406236988135820400042768978148125783102168788341141266995601n,
                },
            },
            y: {
                x: {
                    x: 18015944361566808645646617538776692324996644817729087771685125865839282384639n,
                    y: 20590527843354085975858119904010068521202829492657149776392510780748572069569n,
                },
                y: {
                    x: 17664073445845684529437767161353358750389218422517326190348932281677455999365n,
                    y: 19770036191402095047542829913150897320319072060738714108390435585760438333475n,
                },
                z: {
                    x: 7356273272722652620761028594313907127546255170928188505490728492887259160638n,
                    y: 9630815784834126847147809839685941458873037371694505334631125263767981998073n,
                },
            },
        }

        const result = bn256test.verify((self) => {
            self.squareFQ12(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass expFQ12', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 17806638999176225318750096899600902122175055493686620958948240991875409354173n,
                    y: 4586108468031215844432679281669405041040541253064032263403643089426498747930n,
                },
                y: {
                    x: 13891574517482541056435436742709434952004967705050598500630123010185010139907n,
                    y: 1143636254137155312368314337369689455669618259640937175934871251939618614280n,
                },
                z: {
                    x: 1570663462046768406548343252522320660535976322903016230807178512521885591129n,
                    y: 2227017256133735457298674324583362264585071011480272394489491146499238265831n,
                },
            },
            y: {
                x: {
                    x: 18811999033533415637061051328680710541327388420767625314889438286665392439984n,
                    y: 9351810879344486130170739316275854476956153073798258319200272244799615630559n,
                },
                y: {
                    x: 739112542978336191910917726553160206528382076397548443327405902513408668289n,
                    y: 5844991265008662081308587412255606260896998507917889500470650327079140645281n,
                },
                z: {
                    x: 14351468355702012281715701011484930735412147284572283109119991821642348167713n,
                    y: 3694103519299659229174323537679685100363598181134219232182604240191281676786n,
                },
            },
        }

        const power = 4965661367192848881n

        const res: FQ12 = {
            x: {
                x: {
                    x: 14151119402302086502908963719376192366803091635014911443578100159469021653832n,
                    y: 6208398084320180307167330309409917655515292217317968003659537972866849024169n,
                },
                y: {
                    x: 5944966622841493686390400998708612841573116268338292211899714086074831038506n,
                    y: 19001403943154980426554825852420282105467708204441727159788558908132162473474n,
                },
                z: {
                    x: 11527006206510824341675880048924349638538701031159453006301460499135488675392n,
                    y: 7981013508608733936693541088148558554692521025294076677005767491074762940993n,
                },
            },
            y: {
                x: {
                    x: 18063426034516201616520225507303853711654283914125851959126125589903677526003n,
                    y: 15715916777889017187118805997468098415761218839100399714784743241009161123024n,
                },
                y: {
                    x: 3164311863503605524693427124522731219180306059078428239121595668020675835524n,
                    y: 2882470684118492718005858690457341172767079040425353005601287148393562713577n,
                },
                z: {
                    x: 2043292900252603082420472288679829794180051321976297480947433658783127090402n,
                    y: 7084908200534757378151369962039076455260850623995891433583125291318978571920n,
                },
            },
        }

        const result = bn256test.verify((self) => {
            self.expFQ12(a, power, res)
        })
        //expect(result.success, result.error).to.be.true

        //result = bn256test.verify((self) => {
        //    self.expFQ12_u(a, res)
        //})
        //expect(result.success, result.error).to.be.true
    })
})
